apply plugin: 'java'
apply plugin: 'maven'

group = 'etri'
version = '20.02.09'

sourceCompatibility = JavaVersion.VERSION_1_8;
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
	maven {
		url "http://www.datanucleus.org/downloads/maven2/"
	}
	maven {
		url "http://download.osgeo.org/webdav/geotools/"
	}
	maven {
		url "https://jai.dev.java.net/"
	}	
    mavenCentral()
}

dependencies {
//	compile 'etri:marmot.client:1.1'
	compile project(':marmot.client')
	compile project(':marmot.sample')
//	compile files("$System.env.MARMOT_CLIENT_HOME/bin/marmot.client.jar")

//	compile	"org.geotools:gt-process-feature:17.2"
//	compile	"org.geotools:gt-geotiff:17.2"
//	compile	"org.geotools:gt-arcgrid:17.2"
//	compile "javax.media:jai_core:1.1.3"
	
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options.charSet = 'UTF-8'
}
task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
			
			whenMerged { cp ->
				Map entryByPath = cp.entries.groupBy { entry -> entry.path }
				entryByPath.each { key, values ->
					if ( values.size() > 1 ) {
            			def entry = values.first()
            			if ( entry.kind == 'src' ) {
            				entry.includes = []
            				entry.excludes = []
            			}
            			int index = cp.entries.indexOf entry
            			cp.entries.removeAll values
            			cp.entries.add index, entry
					}
				}
				cp.entries.each { entry ->
					if ( entry.kind == 'src' && entry.hasProperty('output') ) {
						entry.output = 'classes'
					}
				}
			}
		}
	}
}